swirl()
library(swirl)
swirl()
submit()
swirl()
head(flags)
dim(flags)
class(flags)?
)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list
)
as.character(cls)list
as.character(cls_list
)
?sapply
cls_vect <- sapply(flag,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(6)
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(mean(flag_colors)
)
sapply(mean(flag_colors))
cls_vect <- sapply(flags,class)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
sapply(flag_shapes,range)
lapply(flag_shapes,range)
shape_mat <- sapply()
shape_mat <- sapply(flags)
shape_mat <- sapply(flag_shape,range)
shape_mat <- lapply(flag_shape,range)
shape_mat <- lapply(flags_shape,range)
shape_mat <- sapply(flags)
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6,))
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags)
unique_vals <- lapply(unique(flags))
unique_vals <- lapply(unique(flags)
)
unique_vals <- lapply(unique((flags))
)
unique_vals <- lapply(unique(col_flags))
unique_vals <- lapply(unique(col(flags))
)
unique_vals <- lapply(unique((flags))
)
unique(c(3,4,5,5,5,6,6,))
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
unique_vals <- lapply(flags, unique)
sapply(length(flags))
sapply(length(uniwue_vals))
sapply(length(unique_vals))
sapply(length(unique_vals))
unique_vals <- lapply(flags, unique)
unique_vals <- lapply(flags, unique)
sapply(lentgh(unique_vals))
sapply(length(unique_vals))
length(unique_vals)
sapply(length(unique_vals))
length(unique_vals)
sapply(unique_vals)
sapply(length unique_vals)
sapply(length)
unique_vals <- lapply(flags, unique)
play()
quit()
rows <- c(1,2,3,4,5)
columns <- c(6,7,8,9,10)
rbind(rows,columns)
colnames <- ("Samuel", "Hannah", "Henrik", "Sherry", "Mator")
colnam<- ("Samuel", "Hannah", "Henrik", "Sherry", "Mator")
colnames("Samuel", "Hannah", "Henrik", "Sherry", "Mator")
colnames("Samuel", "Hannah", "Henrik", "Sherry", "Mator")
colnames <- ("Samuel", "Hannah", "Henrik", "Sherry", "Mator")
colnam <- ("Samuel", "Hannah", "Henrik", "Sherry", "Mator")
colnam <- ("Samuel", "Hannah", "Henrik", "Sherry", "Mator")
data.frame(,rows,columns)
data.frame( ,rows,columns)
data.frame( ,rows,columns)
ls()
boring_function
my_mean
my_vector(12)
my_mean(12)
?function
)
list.function
list.function()
ls()
z
x
y
list.files()
list.files(function)
list.files(functions)
list.files(functions)
pi
x <- 4
class(x)
x <- 4L
class(x)
x <-c(4,"a",TRUE)
x
class(x)
x <- c(1,3,5)
y<-c(3,2,10)
cbind(x,y)
x <- x(3,5,1,10,12,6)
x <- c(3,5,1,10,12,6)
x[x==0] <6
x
y <- x[x==0] <6
y
y <- x[x==6] < 0
y
x <- c(3,5,1,10,12,6)
x[x == 0] < 6
x
x[x == 6] < 0
x
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
}
}
}
trace()
library(datasets)
data(iris)
summary(iris)
head(iris)
apply(iris[, 1:4], 2 mean)
apply(iris[, 1:4], 2,mean)
apply(iris,2,mean)
librry(datasets)
library(datasets)
data("mtcars")
data(mtcars)
?mtcars
split(mtcars,mtcars$cyl)
mean(mtcars$mpg,mtcars$cyl)
with(mtcars,tapply(mpg,cyl,mean))
sapply(mtcars,cyl,mean)
with(mtcars,tapply(mpg,cyl,mean))
x <- list(a = 1:5, bnorm(10))
x <- list(a = 1:5, rnorm(10))
lapply(x,mean)
x <- 1:4
lapply(x, runif)
lapply(x, mean)
lapply(x, avg)
lapply(x, average)
lapply(x, sum)
lapply(x,x/2)
lapply(x,x^2)
lapply(x,x)
lapply(x, mean)
x <- matrix(rnoem(200),20,10)
x <- matrix(rnorm(200),20,10)
apply(x,2,mean)
apply(x,3,mean)
apply(x,4,mean)
apply(x,1,mean)
mtcars
head(mtcars)
tapply(mtcars)
str(tapply)
tapply(x,1,range)
split(mtcars$mpg)
split(mtcars$mpgm mtcars$cyl)
split(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
# makeCacheMatrix
# Creates a special "matrix" object that can cache its inverse.
# The object does not calculate the inverse, just saves it inside.
# Saves the matrix to variable x and its inverse to variable s in scope.
# Returned object (actually it's a list) contains methods:
# set: sets matrix and resets cached inverse
# get: returns matrix
# setSolve: saves solve value
# getSolve: returns cached inverse value
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() {
x
}
setSolve <- function(solve) {
s <<- solve
}
getSolve <- function() {
s
}
list(set = set, get = get, setSolve = setSolve, getSolve = getSolve)
}
# Function to get the inversed matrix from a special object created by makeCacheMatrix.
# Takes the object of that type as an argument 'x', checks if the inverse value is already
# cached, and if it is returns the cached value; if not, this function calculates the
# inverse for the matrix saved in the 'x', saves it into 'x' cache using method 'setSolve'
# and returns the result.
cacheSolve <- function(x, ...) {
s <- x$getSolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setSolve(s)
s
}
cyls <- split(mtcars, mtcars$cyl)
for (ii in 1:length(cyls)) {
tmpdf <- cyls[[ii]]
sname <- names(cyls)[ii]
plot(tmpdf$wt, tmpdf$mpg,
main = paste("MPG vs Wt",sname,"Cyl"),
ylim = c(0,40), xlab = "Wt / 1,000",
ylab = "MPG", pch=19, col="blue")
grid()
}
unique(mtcars)
unique(mtcars$cyl)
}
par(mfrow=c(1,3))
mysplits = split(mtcars,mtcars$cyl)
maxmpg = max(mtcars$mpg)
for (ii in 1:length(mysplits)) {
tmpdf  <- mysplits[[ii]]
auto <- tmpdf[tmpdf$am == 0,]
man <- tmpdf[tmpdf$am == 1,]
plot(tmpdf$wt, tmpdf$mpg,type="n",
main=paste(names(mysplits[ii])," Cylinders"),
ylim=c(0,maxmpg), xlab="wt",ylab="MPG")
points(auto$wt,auto$mpg,col="blue",pch=19)
points(man$wt,man$mpg,col="pink",pch=19)
grid()
legend("topright", inset=0.05, c("manual","auto"),
pch = 19, col=c("pink","blue"))
}
head(mtcars)
par(mfrow=c(1,3))
mysplits = split(mtcars,mtcars$cyl)
maxmpg = max(mtcars$mpg)
for (ii in 1:length(mysplits)) {
tmpdf  <- mysplits[[ii]]
auto <- tmpdf[tmpdf$am == 0,]
man <- tmpdf[tmpdf$am == 1,]
plot(tmpdf$wt, tmpdf$mpg,type="n",
main=paste(names(mysplits[ii])," Cylinders"),
ylim=c(0,maxmpg), xlab="wt",ylab="MPG")
points(auto$wt,auto$mpg,col="blue",pch=19)
points(man$wt,man$mpg,col="pink",pch=19)
grid()
legend("topright", inset=0.05, c("manual","auto"),
pch = 19, col=c("black","red"))
}
points(man$wt,man$mpg,col="red",pch=21)
par(mfrow=c(1,3))
mysplits = split(mtcars,mtcars$cyl)
maxmpg = max(mtcars$mpg)
for (ii in 1:length(mysplits)) {
tmpdf  <- mysplits[[ii]]
auto <- tmpdf[tmpdf$am == 0,]
man <- tmpdf[tmpdf$am == 1,]
plot(tmpdf$wt, tmpdf$mpg,type="n",
main=paste(names(mysplits[ii])," Cylinders"),
ylim=c(0,maxmpg), xlab="wt",ylab="MPG")
points(auto$wt,auto$mpg,col="black",pch=19)
points(man$wt,man$mpg,col="red",pch=19)
grid()
legend("topright", inset=0.05, c("manual","auto"),
pch = 19, col=c("black","red"))
}
nrow(mtcars)
split(mean(mtcars$mpg),mtcars$cyl)
split(mean(mtcars$mpg, na.rm = FALSE),mtcars$cyl)
split(mean(mtcars$mpg, na.rm = TRUE),mtcars$cyl)
split(mtcars$mpg,mtcars$cyl)
names(mtcars)
class(mtcars)
attach(mtcars)
mpg
table(cyl)
barplot(cyl)
barplot(table(cyl))
stem(mpg)
stem(mean(mpg)
)
stem(mean(mpg))
stem(mpg)
hist(mpg)
hist(mpg)
boxplot(mpg)
mpg[cyl == 4]
head(mtcars)
split(mtcars, mtcars$cyl)
tapply(mpg,cyl,mean)
tapply(mpg,cyl,mean)
table(tapply(mpg,cyl,mean))
table(tapply(mpg,cyl))
table(tapply(mpg))
table(tapply(cyl, mpg))
table(cyl)
table(mpg)
tapply(mpg,cyl,mean)
symmary(mtcars)
summary(mtcars)
tapply(carb,cyl,mean)
splitter_d(mtcars, .(cyl))
split(mtcars,mtcars$cyl)
split(mtcars,mtcars$cyl)
split(mtcars,mtcars$cyl, mean)
split(mtcars,mtcars$cyl, mean)
split(mtcars,mtcars$carb)
unlist(lapply(mtcars, class))
mtcars[] <- lapply(ntcars,function(x) x / mean(x))
mtcars[] <- lapply(mtcars,function(x) x / mean(x))
mtcars[] <- lapply(mtcars,function(x) x / mean(x))
mtcars[]
mtcars[] <- lapply(mtcars,function(x) x)
mtcars[]
cor(mtcars$mpg,mtcars[,-1])
levels(mtcars$am) <-c("Automatic", "Manual")
# First we convert the am as factor data
mtcars$am <- as.factor(mtcars$am)
# by ?mtcars, we can see the following information
# [,9]   am  Transmission (0 = automatic, 1 = manual)
levels(mtcars$am) <-c("Automatic", "Manual")
par(mfrow=c(2,2))
plot(model)
boxplot(mtcars$mpg ~ mtcars$am, data = mtcars, outpch = 19, ylab="mpg:miles per
gallon",xlab="transmission type",main="mpg vs transmission type")
par(mfrow=c(2,2))
plot(model)
boxplot(mtcars$mpg ~ mtcars$am, data = mtcars, outpch = 19, ylab="mpg:miles per
gallon",xlab="transmission type",main="mpg vs transmission type")
model <- lm(mpg~ factor(am):wt + factor(am):qsec,data=mtcars)
summary(model)
model <- lm(mpg~ factor(am):wt + factor(am):qsec,data=mtcars)
summary(model)
par(mfrow=c(2,2))
plot(model)
split(mtcars,mtcars$am)
plot(d, xlab = "MPG", main ="Density Plot of MPG")
par(mfrow = c(1, 2))
# Histogram with Normal Curve
x <- mtcars$mpg
h<-hist(x, breaks=10, col="red", xlab="Miles Per Gallon",
main="Histogram of Miles per Gallon")
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
# Kernel Density Plot
d <- density(mtcars$mpg)
plot(d, xlab = "MPG", main ="Density Plot of MPG")
par(mfrow = c(2, 2))
# Histogram with Normal Curve
x <- mtcars$mpg
h<-hist(x, breaks=10, col="red", xlab="Miles Per Gallon",
main="Histogram of Miles per Gallon")
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
# Kernel Density Plot
d <- density(mtcars$mpg)
plot(d, xlab = "MPG", main ="Density Plot of MPG")
par(mfrow = c(2, 2))
# Histogram with Normal Curve
x <- mtcars$mpg
h<-hist(x, breaks=10, col="red", xlab="Miles Per Gallon",
main="Histogram of MPG")
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
# Kernel Density Plot
d <- density(mtcars$mpg)
plot(d, xlab = "MPG", main ="Density Plot of MPG")
lines(xfit, yfit, col="black", lwd=2)
split(mtcars,mtcars$am)
aggregate.data.frame(mtcars)
aggregate(mpg$am, data = mtcars,mean())
aggregate(mpg$am, data = mtcars,mean)
aggregate(mpg~am, data = mtcars,mean)
aggregate(mpg~am, data = mtcars,mean)
head(mtcars)
aggregate(mpg~cyl, data = mtcars,mean)
aggregate(cyl~am, data = mtcars,mean)
aggregate(carb~am, data = mtcars,mean)
strsplit(mtcars, split, fixed = FALSE, perl = FALSE, useBytes = FALSE)
strsplit(mtcars, split, fixed = FALSE, perl = FALSE, useBytes = FALSE)
tapply(mpg, cyl, mean)
tapply(mpg, cyl, range)
simple.lm(hp,mpg)
simple.lm(hp,mpg)
lm(hp,mpg)
mean(mpg[cyl == 4])
mean(mpg[cyl == 5])
mean(mpg[cyl == 6])
mean(mpg[cyl == 8])
# Boxplot of MPG by Car Cylinders
boxplot(mpg~cyl,data=mtcars, main="Car Milage Data",
xlab="Number of Cylinders", ylab="Miles Per Gallon")
mean(mpg~cyl)
tapply(mpg, cyl, range)
tapply(mpg, cyl, max)
tapply(mpg, cyl, min)
tapply(mpg, cyl, range)
tapply(mpg, cyl, avg)
tapply(mpg, cyl, average)
tapply(mpg, cyl, t-test)
tapply(mpg, cyl, t-test)
mean(mpg~cyl)
tapply(mpg, cyl, max)
mean(mpg[cyl == 5])
library(datasets)
data(iris)
iris
head(iris)
mean(Iris$Sepal$Length,[Species == 'virginica'])
mean(Iris$Sepal$Length,Species == 'virginica')
mean(Iris$Sepal.Length,Species == 'virginica')
mean(iris$Sepal.Length, iris$Species == 'virginica')
mean(iris$Sepal.Length, iris$Species == 'virginica')
iris$Sepal.Length
mean(Iris$Sepal.Length)
mean(Sepal.Length)
class(iris)
summary(iris)
iris["Sepal.Length"]
mean(iris["Sepal.Length"])
mean("Sepal.Length")
mean(Sepal.Length)
mean(iris$Sepal.Length)
mean(iris$Sepal.Length), iris$Species = "virgnina"
mean(iris$Sepal.Length), iris$Species = "virginia"
mean(iris$Sepal.Length), iris$Species = "virginia"
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(mtcar$Sepal.Length, mtcar$Species, m)
mtcars
head(mtcars)
with(mtcars,tapply(mpg,cyl,mean))
with(mtcars,tapply(mpg,cyl,mean))
split(mtcars,mtcars$cyl)
sapply(mtcars,cyl,mean)
with(mtcars,tapply(mpg,cyl,mean))
with(mtcars,tapply(mpg,cyl,mean), cyl)
with(mtcars,tapply(mpg,cyl,mean))
t(mtcars)
t(cars)
cars <- mntcars(1:5,1:4)
cars <- mtcars(1:5,1:4)
cars <- mtcars[1:5,1:4]
cars
head(mtcars)
cars <- mtcars[1:5,1:11]
cars
t(cars)
options(digits=3)
attach(mtcars)
aggdata <- aggregate(mtcars, by=list(cyl,gear),FUN=mean,na.rm=TRUE)
aggdata
?mtcars
options(digits=3)
attach(mtcars)
aggdata <- aggregate(mtcars, by=list(cyl,gear),FUN=mean,na.rm=TRUE)
aggdata
.518 - 2.042
debug(ls)
Q
Q
options(digits=3)
attach(mtcars)
aggdata <- aggregate(mtcars, by=list(cyl,gear),FUN=mean,na.rm=TRUE)
aggdata
Q
quit()
quit
ls
pattern
